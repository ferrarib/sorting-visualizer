{"version":3,"sources":["components/Navbar/index.js","components/SortingWindow/index.js","components/AlgorithmLabels.js","components/Algorithms/BubbleSort.js","components/Algorithms/MergeSort.js","components/Algorithms/QuickSort.js","components/Algorithms/InsertionSort.js","components/Algorithms/SelectionSort.js","App.js","reportWebVitals.js","index.js"],"names":["myFunction","document","getElementById","classList","toggle","window","onclick","event","target","matches","i","dropdowns","getElementsByClassName","length","openDropdown","contains","remove","Navbar","setSortAlgo","setListSize","handleSort","generateRandomArray","sorting","completed","handleAlgorithmChange","useCallback","console","log","getAttribute","handleListSizeChange","value","Number","className","htmlFor","type","name","id","min","max","defaultValue","step","onInput","onClick","disabled","SortingWindow","arrayList","arrayLength","compare","swap","sorted","map","element","style","width","String","height","backgroundColor","includes","border","margin","bubblesort","title","description","mergesort","quicksort","insertionsort","selectionsort","arr","j","temp","BubbleSort","listCopy","slice","sortingOrder","push","order","mergeSortHelper","dupBlocks","l","r","mid","Math","floor","merge","MergeSort","blocks","quickSortHelper","pivot","random","m","partition","QuickSort","InsertionSort","SelectionSort","App","len","setCompleted","setSorting","setSortedIndex","randomArray","Array","from","keys","randomIndex","setArrayList","algoLabels","useState","sortAlgo","listSize","setSwap","setCompare","sortedIndex","useEffect","sortAccOrder","loop","setTimeout","k","index","prevState","join","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8ddd5333.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./NavbarElements.css\";\r\nimport { useCallback } from \"react\";\r\n\r\nfunction myFunction() {\r\n\tdocument.getElementById(\"drop-down\").classList.toggle(\"show\");\r\n}\r\n\r\n// Close the dropdown menu if the user clicks outside of it\r\nwindow.onclick = function (event) {\r\n\tif (!event.target.matches(\".dropbtn\")) {\r\n\t\tvar dropdowns = document.getElementsByClassName(\"menu-drop-down\");\r\n\t\tvar i;\r\n\t\tfor (i = 0; i < dropdowns.length; i++) {\r\n\t\t\tvar openDropdown = dropdowns[i];\r\n\t\t\tif (openDropdown.classList.contains(\"show\")) {\r\n\t\t\t\topenDropdown.classList.remove(\"show\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\nconst Navbar = ({\r\n\tsetSortAlgo,\r\n\tsetListSize,\r\n\thandleSort,\r\n\tgenerateRandomArray,\r\n\tsorting,\r\n\tcompleted,\r\n}) => {\r\n\tconst handleAlgorithmChange = useCallback(\r\n\t\t(event) => {\r\n\t\t\tconsole.log(event.target.getAttribute(\"value\"));\r\n\t\t\tsetSortAlgo(event.target.getAttribute(\"value\"));\r\n\t\t},\r\n\t\t[setSortAlgo]\r\n\t);\r\n\tconst handleListSizeChange = useCallback(\r\n\t\t(event) => {\r\n\t\t\tconsole.log(event.target.value);\r\n\t\t\tsetListSize(Number(event.target.value));\r\n\t\t},\r\n\t\t[setListSize]\r\n\t);\r\n\r\n\treturn (\r\n\t\t<div className=\"navbar\">\r\n\t\t\t<div className=\"navbar-container\">\r\n\t\t\t\t<div className=\"navbar-heading\">\r\n\t\t\t\t\t<h1>Sorting Visualizer</h1>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"navbar-menu\">\r\n\t\t\t\t\t<div className=\"menu-item range\">\r\n\t\t\t\t\t\t<label htmlFor=\"speed\">Speed: </label>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"range\"\r\n\t\t\t\t\t\t\tname=\"speed\"\r\n\t\t\t\t\t\t\tid=\"speed\"\r\n\t\t\t\t\t\t\tmin=\"0\"\r\n\t\t\t\t\t\t\tmax=\"10\"\r\n\t\t\t\t\t\t\tdefaultValue=\"5\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"menu-item range\">\r\n\t\t\t\t\t\t<label htmlFor=\"size\">List Size: </label>\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\ttype=\"range\"\r\n\t\t\t\t\t\t\tname=\"size\"\r\n\t\t\t\t\t\t\tid=\"size\"\r\n\t\t\t\t\t\t\tmin=\"20\"\r\n\t\t\t\t\t\t\tmax=\"100\"\r\n\t\t\t\t\t\t\tstep=\"10\"\r\n\t\t\t\t\t\t\tdefaultValue=\"100\"\r\n\t\t\t\t\t\t\tonInput={handleListSizeChange}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"menu-item\">\r\n\t\t\t\t\t\t<button className=\"dropbtn\" onClick={myFunction}>\r\n\t\t\t\t\t\t\tAlgorithm\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t<div id=\"drop-down\" className=\"menu-drop-down\">\r\n\t\t\t\t\t\t\t<a onClick={handleAlgorithmChange} value=\"bubblesort\">\r\n\t\t\t\t\t\t\t\tBubble Sort\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t<a onClick={handleAlgorithmChange} value=\"mergesort\">\r\n\t\t\t\t\t\t\t\tMerge Sort\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t<a onClick={handleAlgorithmChange} value=\"insertionsort\">\r\n\t\t\t\t\t\t\t\tInsertion Sort\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t<a onClick={handleAlgorithmChange} value=\"selectionsort\">\r\n\t\t\t\t\t\t\t\tSelection Sort\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t<a onClick={handleAlgorithmChange} value=\"quicksort\">\r\n\t\t\t\t\t\t\t\tQuick Sort\r\n\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"menu-item\">\r\n\t\t\t\t\t\t<button onClick={generateRandomArray} disabled={sorting}>\r\n\t\t\t\t\t\t\tUpdate\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"menu-item\">\r\n\t\t\t\t\t\t<button onClick={handleSort} disabled={sorting || completed}>\r\n\t\t\t\t\t\t\tSort\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./SortingWindowElements.css\";\r\n\r\nconst SortingWindow = ({ arrayList, arrayLength, compare, swap, sorted }) => {\r\n\treturn (\r\n\t\t<div className=\"sorting-container\">\r\n\t\t\t{arrayList.map((element, i) => (\r\n\t\t\t\t<div\r\n\t\t\t\t\tid={element}\r\n\t\t\t\t\tkey={element}\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\twidth: String(100 / arrayLength) + \"%\",\r\n\t\t\t\t\t\theight: String(element) + \"%\",\r\n\t\t\t\t\t\tbackgroundColor:\r\n\t\t\t\t\t\t\tcompare && (i === compare[0] || i === compare[1])\r\n\t\t\t\t\t\t\t\t? \"yellow\"\r\n\t\t\t\t\t\t\t\t: swap && (i === swap[0] || i === swap[1])\r\n\t\t\t\t\t\t\t\t? \"red\"\r\n\t\t\t\t\t\t\t\t: sorted && sorted.includes(i)\r\n\t\t\t\t\t\t\t\t? \"green\"\r\n\t\t\t\t\t\t\t\t: \"blue\",\r\n\t\t\t\t\t\tborder: \"solid white 1px\",\r\n\t\t\t\t\t\tmargin: \"0 2px\",\r\n\t\t\t\t\t}}></div>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SortingWindow;\r\n","export const bubblesort = {\r\n\ttitle: \"Bubble Sort\",\r\n\tdescription:\r\n\t\t\"Bubble sort, sometimes referred to as sinking sort, is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.\",\r\n};\r\nexport const mergesort = {\r\n\ttitle: \"Merge Sort\",\r\n\tdescription:\r\n\t\t\"Like QuickSort, Merge Sort is a Divide and Conquer algorithm. It divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves. The merge() function is used for merging two halves. The merge(arr, l, m, r) is a key process that assumes that arr[l..m] and arr[m+1..r] are sorted and merges the two sorted sub-arrays into one.\",\r\n};\r\nexport const quicksort = {\r\n\ttitle: \"Quick Sort\",\r\n\tdescription:\r\n\t\t\"Quicksort is a divide-and-conquer algorithm. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. For this reason, it is sometimes called partition-exchange sort.[4] The sub-arrays are then sorted recursively. This can be done in-place, requiring small additional amounts of memory to perform the sorting.\",\r\n};\r\nexport const insertionsort = {\r\n\ttitle: \"Insertion Sort\",\r\n\tdescription:\r\n\t\t\"Insertion sort is the sorting mechanism where the sorted array is built having one item at a time. The array elements are compared with each other sequentially and then arranged simultaneously in some particular order. The analogy can be understood from the style we arrange a deck of cards. This sort works on the principle of inserting an element at a particular position, hence the name Insertion Sort.\",\r\n};\r\nexport const selectionsort = {\r\n\ttitle: \"Selection Sort\",\r\n\tdescription:\r\n\t\t\"The algorithm divides the input list into two parts: a sorted sublist of items which is built up from left to right at the front (left) of the list and a sublist of the remaining unsorted items that occupy the rest of the list. Initially, the sorted sublist is empty and the unsorted sublist is the entire input list. The algorithm proceeds by finding the smallest (or largest, depending on sorting order) element in the unsorted sublist, exchanging (swapping) it with the leftmost unsorted element (putting it in sorted order), and moving the sublist boundaries one element to the right.\",\r\n};\r\n","const swap = (arr, i, j) => {\r\n\tconst temp = arr[i];\r\n\tarr[i] = arr[j];\r\n\tarr[j] = temp;\r\n};\r\n\r\nconst BubbleSort = (arrayList) => {\r\n\tconst listCopy = arrayList.slice(); // copying blocks array\r\n\tconst sortingOrder = [];\r\n\r\n\tlet i, j;\r\n\r\n\tfor (i = 0; i < listCopy.length; i++) {\r\n\t\tfor (j = 0; j < listCopy.length - i - 1; j++) {\r\n\t\t\tsortingOrder.push([j, j + 1, null, null]); // Compare\r\n\t\t\tif (listCopy[j] > listCopy[j + 1]) {\r\n\t\t\t\tswap(listCopy, j, j + 1);\r\n\t\t\t\tsortingOrder.push([j, j + 1, listCopy.slice(), null]); // Swap\r\n\t\t\t}\r\n\t\t}\r\n\t\tsortingOrder.push([null, null, null, j]); // j-th element is in correct position ( Sorted )\r\n\t}\r\n\r\n\tconsole.log(sortingOrder);\r\n\r\n\treturn sortingOrder;\r\n};\r\n\r\nexport default BubbleSort;\r\n","let order = [];\r\n\r\nconst merge = (dupBlocks, l, mid, r) => {\r\n\tlet i = l,\r\n\t\tj = mid + 1;\r\n\r\n\tconst arr = [];\r\n\r\n\twhile (i <= mid && j <= r) {\r\n\t\torder.push([i, j, null, null]); // Compare i th and j th element\r\n\t\tif (dupBlocks[i] <= dupBlocks[j]) {\r\n\t\t\tarr.push(dupBlocks[i++]);\r\n\t\t} else {\r\n\t\t\tarr.push(dupBlocks[j++]);\r\n\t\t}\r\n\t}\r\n\r\n\twhile (i <= mid) {\r\n\t\torder.push([i, null, null, null]);\r\n\t\tarr.push(dupBlocks[i++]);\r\n\t}\r\n\r\n\twhile (j <= r) {\r\n\t\torder.push([null, j, null, null]);\r\n\t\tarr.push(dupBlocks[j++]);\r\n\t}\r\n\r\n\tfor (i = l; i <= r; i++) {\r\n\t\tdupBlocks[i] = arr[i - l];\r\n\t\torder.push([i, null, dupBlocks.slice(), null]);\r\n\t}\r\n};\r\n\r\nconst mergeSortHelper = (dupBlocks, l, r) => {\r\n\tif (l >= r) return;\r\n\r\n\tconst mid = Math.floor((l + r) / 2);\r\n\r\n\tmergeSortHelper(dupBlocks, l, mid);\r\n\tmergeSortHelper(dupBlocks, mid + 1, r);\r\n\r\n\tmerge(dupBlocks, l, mid, r);\r\n};\r\n\r\nconst MergeSort = (blocks) => {\r\n\torder = [];\r\n\tconst dupBlocks = blocks.slice(); // copying blocks array\r\n\r\n\tmergeSortHelper(dupBlocks, 0, dupBlocks.length - 1);\r\n\r\n\tfor (let i = 0; i < dupBlocks.length; i++) {\r\n\t\torder.push([null, null, null, i]); // i th element will be in correct position\r\n\t}\r\n\r\n\treturn order;\r\n};\r\n\r\nexport default MergeSort;\r\n","let order = [];\r\n\r\nconst swap = (arr, i, j) => {\r\n\tconst temp = arr[i];\r\n\tarr[i] = arr[j];\r\n\tarr[j] = temp;\r\n};\r\n\r\nconst partition = (dupBlocks, l, r) => {\r\n\tconst pivot = l;\r\n\tlet j = l;\r\n\r\n\tfor (let i = l + 1; i <= r; i++) {\r\n\t\torder.push([i, pivot, null, null]);\r\n\t\tif (dupBlocks[i] < dupBlocks[pivot]) {\r\n\t\t\tj += 1;\r\n\t\t\tswap(dupBlocks, i, j);\r\n\t\t\torder.push([i, j, dupBlocks.slice(), null]);\r\n\t\t}\r\n\t}\r\n\r\n\tswap(dupBlocks, pivot, j);\r\n\torder.push([pivot, j, dupBlocks.slice(), null]);\r\n\torder.push([null, null, null, j]);\r\n\treturn j;\r\n};\r\n\r\nconst quickSortHelper = (dupBlocks, l, r) => {\r\n\tif (l >= r) {\r\n\t\tif (l === r) order.push([null, null, null, l]);\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst pivot = l + Math.floor(Math.random() * (r - l));\r\n\r\n\tswap(dupBlocks, l, pivot);\r\n\torder.push([l, pivot, dupBlocks.slice(), null]);\r\n\r\n\tconst m = partition(dupBlocks, l, r);\r\n\r\n\tquickSortHelper(dupBlocks, l, m - 1);\r\n\tquickSortHelper(dupBlocks, m + 1, r);\r\n\r\n\treturn;\r\n};\r\n\r\nconst QuickSort = (blocks) => {\r\n\tconst dupBlocks = blocks.slice(); // Copying blocks array\r\n\torder = [];\r\n\r\n\tquickSortHelper(dupBlocks, 0, dupBlocks.length - 1);\r\n\r\n\treturn order;\r\n};\r\n\r\nexport default QuickSort;\r\n","const swap = (arr, i, j) => {\r\n\tconst temp = arr[i];\r\n\tarr[i] = arr[j];\r\n\tarr[j] = temp;\r\n};\r\n\r\nconst InsertionSort = (blocks) => {\r\n\tconst dupBlocks = blocks.slice(); // copying blocks array\r\n\tconst order = [];\r\n\r\n\tlet i, j;\r\n\r\n\tfor (i = 0; i < dupBlocks.length; i++) {\r\n\t\tj = i - 1;\r\n\t\twhile (j >= 0 && dupBlocks[j] > dupBlocks[j + 1]) {\r\n\t\t\tswap(dupBlocks, j, j + 1);\r\n\t\t\torder.push([j, j + 1, null, null]); // Compare\r\n\t\t\torder.push([j, j + 1, dupBlocks.slice(), null]); // Swap\r\n\t\t\tj -= 1;\r\n\t\t}\r\n\t}\r\n\r\n\tfor (i = 0; i < dupBlocks.length; i++) {\r\n\t\torder.push([null, null, null, i]);\r\n\t}\r\n\r\n\treturn order;\r\n};\r\n\r\nexport default InsertionSort;\r\n","const swap = (arr, i, j) => {\r\n\tconst temp = arr[i];\r\n\tarr[i] = arr[j];\r\n\tarr[j] = temp;\r\n};\r\n\r\nconst SelectionSort = (blocks) => {\r\n\tconst dupBlocks = blocks.slice(); // copying blocks array\r\n\tconst order = [];\r\n\r\n\tlet i, j;\r\n\r\n\tfor (i = 0; i < dupBlocks.length; i++) {\r\n\t\tfor (j = i + 1; j < dupBlocks.length; j++) {\r\n\t\t\torder.push([i, j, null, null]); // Compare\r\n\t\t\tif (dupBlocks[i] > dupBlocks[j]) {\r\n\t\t\t\tswap(dupBlocks, i, j);\r\n\t\t\t\torder.push([i, j, dupBlocks.slice(), null]); // Swap\r\n\t\t\t}\r\n\t\t}\r\n\t\torder.push([null, null, null, i]); // i-th element is in correct position ( Sorted )\r\n\t}\r\n\r\n\treturn order;\r\n};\r\n\r\nexport default SelectionSort;\r\n","import \"./App.css\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport SortingWindow from \"./components/SortingWindow\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n\tbubblesort,\r\n\tmergesort,\r\n\tquicksort,\r\n\tinsertionsort,\r\n\tselectionsort,\r\n} from \"./components/AlgorithmLabels.js\";\r\n\r\nimport BubbleSort from \"./components/Algorithms/BubbleSort\";\r\nimport MergeSort from \"./components/Algorithms/MergeSort\";\r\nimport QuickSort from \"./components/Algorithms/QuickSort\";\r\nimport InsertionSort from \"./components/Algorithms/InsertionSort\";\r\nimport SelectionSort from \"./components/Algorithms/SelectionSort\";\r\n\r\nfunction App() {\r\n\tfunction generateRandomArray(len) {\r\n\t\tsetCompleted(false);\r\n\t\tsetSorting(false);\r\n\t\tsetSortedIndex([]);\r\n\r\n\t\tconst randomArray = Array.from(Array(len + 1).keys()).slice(1);\r\n\r\n\t\tfor (let i = randomArray.length - 1; i > 0; i--) {\r\n\t\t\tconst randomIndex = Math.floor(Math.random() * (i - 1));\r\n\t\t\tconst temp = randomArray[i];\r\n\r\n\t\t\trandomArray[i] = randomArray[randomIndex];\r\n\t\t\trandomArray[randomIndex] = temp;\r\n\t\t}\r\n\r\n\t\tsetArrayList(randomArray);\r\n\t}\r\n\r\n\tconst [sortAlgo, setSortAlgo] = useState(\"bubblesort\");\r\n\tconst [listSize, setListSize] = useState(100);\r\n\tconst [arrayList, setArrayList] = useState([]);\r\n\tconst [swap, setSwap] = useState([]);\r\n\tconst [compare, setCompare] = useState([]);\r\n\tconst [sortedIndex, setSortedIndex] = useState([]);\r\n\tconst [sorting, setSorting] = useState(false);\r\n\tconst [completed, setCompleted] = useState(true);\r\n\r\n\tuseEffect(() => {\r\n\t\tgenerateRandomArray(listSize);\r\n\t}, [listSize, sortAlgo]);\r\n\r\n\tvar algoLabels;\r\n\r\n\t// Sorting according to the algorithm\r\n\tconst handleSort = () => {\r\n\t\t// console.log(\"handleSort is called\");\r\n\t\tconst sortAccOrder = (sortingOrder) => {\r\n\t\t\t(function loop(i) {\r\n\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\tconst [j, k, arr, index] = sortingOrder[i];\r\n\t\t\t\t\tsetCompare([j, k]);\r\n\t\t\t\t\tsetSwap([]);\r\n\r\n\t\t\t\t\tif (index !== null) {\r\n\t\t\t\t\t\tsetSortedIndex((prevState) => [...prevState, index]);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (arr) {\r\n\t\t\t\t\t\tsetArrayList(arr);\r\n\t\t\t\t\t\tif (j !== null || k != null) setSwap([j, k]);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (++i < sortingOrder.length) {\r\n\t\t\t\t\t\tloop(i);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsetSorting(false);\r\n\t\t\t\t\t\tsetCompleted(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, 1);\r\n\t\t\t})(0);\r\n\t\t};\r\n\r\n\t\tsetSorting(true);\r\n\r\n\t\tsortAlgo === \"bubblesort\"\r\n\t\t\t? sortAccOrder(BubbleSort(arrayList))\r\n\t\t\t: sortAlgo === \"mergesort\"\r\n\t\t\t? sortAccOrder(MergeSort(arrayList))\r\n\t\t\t: sortAlgo === \"quicksort\"\r\n\t\t\t? sortAccOrder(QuickSort(arrayList))\r\n\t\t\t: sortAlgo === \"insertionsort\"\r\n\t\t\t? sortAccOrder(InsertionSort(arrayList))\r\n\t\t\t: sortAlgo === \"selectionsort\"\r\n\t\t\t? sortAccOrder(SelectionSort(arrayList))\r\n\t\t\t: (() => {\r\n\t\t\t\t\tsetSorting(false);\r\n\t\t\t\t\tsetCompleted(true);\r\n\t\t\t  })();\r\n\t};\r\n\r\n\tswitch (sortAlgo) {\r\n\t\tcase \"mergesort\":\r\n\t\t\talgoLabels = mergesort;\r\n\t\t\tbreak;\r\n\t\tcase \"quicksort\":\r\n\t\t\talgoLabels = quicksort;\r\n\t\t\tbreak;\r\n\t\tcase \"insertionsort\":\r\n\t\t\talgoLabels = insertionsort;\r\n\t\t\tbreak;\r\n\t\tcase \"selectionsort\":\r\n\t\t\talgoLabels = selectionsort;\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\talgoLabels = bubblesort;\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"app-container\">\r\n\t\t\t<Navbar\r\n\t\t\t\tsetSortAlgo={setSortAlgo}\r\n\t\t\t\tsetListSize={setListSize}\r\n\t\t\t\thandleSort={handleSort}\r\n\t\t\t\tgenerateRandomArray={() => generateRandomArray(listSize)}\r\n\t\t\t\tsorting={sorting}\r\n\t\t\t\tcompleted={completed}\r\n\t\t\t/>\r\n\t\t\t<div className=\"main-container\">\r\n\t\t\t\t<div className=\"sorting-info\">\r\n\t\t\t\t\t<div className=\"info-col-1\">\r\n\t\t\t\t\t\t<div className=\"info-title-table\">\r\n\t\t\t\t\t\t\t<div className=\"info-title\">{algoLabels.title}</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"info-description\">{algoLabels.description}</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"info-col-2\">\r\n\t\t\t\t\t\t<div className=\"info-list\">[{arrayList.join(\" , \")}]</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<SortingWindow\r\n\t\t\t\t\tarrayList={arrayList}\r\n\t\t\t\t\tarrayLength={listSize}\r\n\t\t\t\t\tswap={sorting && swap}\r\n\t\t\t\t\tcompare={sorting && compare}\r\n\t\t\t\t\tsorted={sortedIndex}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}